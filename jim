<?php

require_once './Autoloader.php';

$args = array_slice($argv, 1);
$isWindows = (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN');

error_reporting(E_ALL);

switch ($args[0]) {

    case "build":
        $path = './src/resources/';
        $publicPath = './src/public/';

        foreach ($args as $arg) {
            foreach (['path'] as $input) {
                if (str_contains($arg, "--$input=")) {
                    $$input = explode("=", $arg)[1];
                }
            }
        }

        echo "\e[0;36;40m Hi, I'm Jim and I'm here to compile your resources :) \e[0m\n";

        $resourcePaths = array_filter(glob("{$path}*"), 'is_dir');
        $resourcePaths = array_diff($resourcePaths, ['./src/resources/views', './src/resources/vendor']);
        $pathsToDelete = array_filter(glob("{$publicPath}*"), 'is_dir');
        $pathsToDelete = array_diff($pathsToDelete, ['index.php', '.htaccess', 'robots.txt', 'vendor']);

        foreach ($pathsToDelete as $delete) {
            $delete = realpath($delete);
            ($isWindows) ? exec("rd $delete /S /Q") : exec("rm -rf /$delete");
        }

        foreach ($resourcePaths as $resourcePath) {
            $resourcePath = realpath($resourcePath);
            $publicPath = str_replace('resources', 'public', $resourcePath);

            echo "\t\e[0;35m{$resourcePath}\e[0m -> \e[0;32m{$publicPath}\e[0m\n";

            mkdir($publicPath, 0755);

            $iterator = new \RecursiveIteratorIterator(
                new \RecursiveDirectoryIterator($resourcePath, \RecursiveDirectoryIterator::SKIP_DOTS),
                \RecursiveIteratorIterator::SELF_FIRST
            );

            foreach ($iterator as $resource) {
                $fileName = $iterator->getSubPathname();
                $out = $publicPath . DIRECTORY_SEPARATOR . $fileName;

                if ($resource->isDir()) {
                    mkdir($out);
                    continue;
                }

                $file = pathinfo($fileName);
                $extension = $file['extension'];

                if (in_array($extension, ['css', 'js'])) {
                    switch ($extension) {
                        case "css":
                        case "js":
                            echo "\t\tâ†£ Detected '\e[0;33m{$file['basename']}\e[0m' as \e[0;31m{$extension}\e[0m, minifying: ";
                            $minifier = new ("MatthiasMullie\\Minify\\" . strtoupper($extension))($resource);
                            $minifier->minify($out);
                            echo "\e[0;32mDone!\e[0m\n";
                            break;

                        default:
                            break;
                    }
                } else {
                    copy($resource, $out);
                }
            }
        }

        echo "\e[0;32;40m Jim used compile, it was super effective \e[0m\n";
        break;

    case "invalidate-caches":
            $caches = [];
        break;

    case "serve":
        $path = './src/public';
        $port = 80;

        foreach ($args as $arg) {
            foreach (['path', 'port'] as $input) {
                if (str_contains($arg, "--$input=")) {
                    $$input = explode("=", $arg)[1];
                }
            }
        }

        exec("php -S localhost:$port -t $path");
        break;

    case "test":
        $verbose = false;

        foreach ($args as $arg) {
            foreach (['verbose'] as $input) {

                if (str_contains($arg, "--$input=")) {
                    $$input = explode("=", $arg)[1];
                }
            }
        }

        $cmd = "php ./vendor/bin/phpunit";

        if($verbose) $cmd .= " --verbose";

        system($cmd);

        break;

    default:
        echo "\e[0;31;40m Jim doesn't know this command :( \e[0m\n";
        return;
}
